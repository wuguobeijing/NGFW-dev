# This file was generated by the Tkinter Designer by Parth Jadhav
# https://github.com/ParthJadhav/Tkinter-Designer
import json
import subprocess
import tkinter
from pathlib import Path

# from tkinter import *
# Explicit imports to satisfy Flake8
from tkinter import Tk, Canvas, Entry, Text, Button, PhotoImage, messagebox, BOTH, END
from tkinter.ttk import Scrollbar

import redis
import yaml


class MY_MANAGE_GUI():
    def __init__(self, manage_window):
        self.manage_window = manage_window
        self.OUTPUT_PATH = Path(__file__).parent
        self.ASSETS_PATH = self.OUTPUT_PATH / Path("assets")
        self.selected_device = None
        self.rules_list_yaml_path = "/media/wuguo-buaa/LENOVO_USB_HDD/PycharmProjects/NGFW-dev/src/Model/cache/rules_list.yaml"
        self.rules = []
        self.host = '192.168.0.100'
        self.r = redis.Redis(host=self.host, port=6379, db=1)
        self.key_list = self.r.keys()
        self.flows_key_list = []
        self.rules_params_yaml_path = "/media/wuguo-buaa/LENOVO_USB_HDD/PycharmProjects/NGFW-dev/src/Model/cache/rules_append.yaml"

    def relative_to_assets(self, path: str) -> Path:
        return self.ASSETS_PATH / Path(path)

    def goto_main(self):
        self.manage_window.destroy()

    def check_device(self):
        if self.selected_device is None:
            messagebox.showwarning("warning", "have to select device first")
            return False
        else:
            return True

    def select_device_k(self):
        self.selected_device = "k"

    def select_device_localhost(self):
        self.selected_device = "localhost"

    def parse_rule(self,content_json):
        saddr = content_json['saddr']
        daddr = content_json['daddr']
        sport = content_json['sport']
        dport = content_json['dport']
        proto = content_json['proto']
        return [saddr, daddr, sport, dport, proto]

    def ssh_query_ip_tables(self, rules_content):
        ssh_content = "ssh %s \'%s\'" % (self.selected_device, rules_content)
        p = subprocess.Popen(ssh_content, shell=True, stdout=subprocess.PIPE, stderr=subprocess.STDOUT)
        out, err = p.communicate()
        if err is not None:
            messagebox.showwarning("insert rules failed!", "try again later")
        else:
            if out is not None:
                print(out)

    def new_redis_data(self):
        with open(self.rules_params_yaml_path, 'r', encoding="utf-8") as f:
            values = yaml.load(f, Loader=yaml.FullLoader)
            CC_list = values['CC_list']
            DDoS_list = values['DDoS_list']
            nmap_list = values['nmap_list']
            msf_list = values['msf_list']
            if CC_list is None:
                CC_list = []
            if DDoS_list is None:
                DDoS_list = []
            if nmap_list is None:
                nmap_list = []
            if msf_list is None:
                msf_list = []
        with open(self.rules_list_yaml_path, 'r', encoding="utf-8") as f:
            rule_list = yaml.load(f, Loader=yaml.FullLoader)
            self.rules = rule_list['iptables_rules']
            if self.rules is None:
                self.rules = []
        for key in self.key_list:
            if '_flows' in str(key):
                if key not in self.flows_key_list:
                    for item in self.r.hgetall(key):
                        firewall_content = ''
                        str_item = str(item, 'utf-8')
                        content_json = json.loads(str(self.r.hget(key, str_item), 'utf-8'))
                        if content_json['label'] == 'malicious':
                            parsed_rule_params = self.parse_rule(content_json)
                            if content_json['module_labels'] == 'C&C':
                                match_params = [parsed_rule_params[4], parsed_rule_params[0],
                                                parsed_rule_params[1], parsed_rule_params[3]]
                                if match_params not in CC_list:
                                    firewall_content = "sudo iptables -A INPUT -p %s -s %s -d %s --dport %s -m comment " \
                                                       "--comment \"CC\" -j DROP" \
                                                       % (match_params[0], match_params[1], match_params[2],
                                                          match_params[3])
                                    CC_list.append(match_params)
                            elif content_json['module_labels'] == 'DDoS':
                                match_params = [parsed_rule_params[4], parsed_rule_params[0],
                                                parsed_rule_params[2], parsed_rule_params[1]]
                                if match_params not in DDoS_list:
                                    firewall_content = "sudo iptables -A INPUT -p %s -s %s --sport %s -d %s -m comment " \
                                                       "--comment \"DDoS\" -j DROP" \
                                                       % (match_params[0], match_params[1], match_params[2],
                                                          match_params[3])
                                    DDoS_list.append(match_params)
                            elif content_json['module_labels'] == 'msf':
                                match_params = [parsed_rule_params[4], parsed_rule_params[1],
                                                parsed_rule_params[0], parsed_rule_params[3]]
                                if match_params not in msf_list:
                                    firewall_content = "sudo iptables -A INPUT -p %s -s %s -d %s --sport %s -m comment " \
                                                       "--comment \"msf\" -j DROP" \
                                                       % (match_params[0], match_params[1], match_params[2],
                                                          match_params[3])
                                    msf_list.append(match_params)
                            elif content_json['module_labels'] == 'nmap':
                                match_params = [parsed_rule_params[4], parsed_rule_params[0],
                                                parsed_rule_params[2], parsed_rule_params[1]]
                                if match_params not in nmap_list:
                                    firewall_content = "sudo iptables -A INPUT -p %s -s %s --sport %s -d %s -m comment " \
                                                       "--comment \"nmap\" -j DROP" \
                                                       % (match_params[0], match_params[1], match_params[2],
                                                          match_params[3])
                                    nmap_list.append(match_params)
                            if firewall_content != '':
                                self.rules.append(firewall_content)
                                self.ssh_query_ip_tables(firewall_content)
                    self.flows_key_list.append(key)
        new_data = {
            'CC_list': CC_list,
            'DDoS_list': DDoS_list,
            'nmap_list': nmap_list,
            'msf_list': msf_list,
        }
        all_rules = {
            'iptables_rules': self.rules
        }
        print(self.rules)
        # note rules params
        f = open(self.rules_params_yaml_path, "w")
        yaml.dump(new_data, f)
        f.close()
        # note iptables rules
        f = open(self.rules_list_yaml_path, "w")
        yaml.dump(all_rules, f)
        f.close()
        self.show_select_rules()

    def show_select_rules(self):
        self.rule_printout.delete(0, END)
        with open(self.rules_list_yaml_path, 'r', encoding="utf-8") as f:
            rule_list = yaml.load(f, Loader=yaml.FullLoader)
            self.rules = rule_list['iptables_rules']
        if self.rules is None:
            self.rules = []
        if len(self.rules) > 0:
            for rule in self.rules:
                self.rule_printout.insert(END, rule)

    def set_manage_window(self):
        self.manage_window.geometry("1317x855")
        self.manage_window.configure(bg="#282B2D")
        self.manage_window.iconphoto(False, tkinter.PhotoImage(
            file='/media/wuguo-buaa/LENOVO_USB_HDD/PycharmProjects/NGFW-dev/gui/NGFW/LOGO.png'))
        self.manage_window.resizable(False, False)
        self.canvas = Canvas(
            self.manage_window,
            bg="#282B2D",
            height=855,
            width=1317,
            bd=0,
            highlightthickness=0,
            relief="ridge"
        )

        self.canvas.place(x=1, y=1)
        self.canvas.create_rectangle(
            0.0,
            0.0,
            345.7995910644531,
            855.3531494140625,
            fill="#D9D9D9",
            outline="")

        self.button_image_1 = PhotoImage(
            file=self.relative_to_assets("button_1.png"))
        self.button_1 = Button(
            self.canvas,
            image=self.button_image_1,
            borderwidth=0,
            highlightthickness=0,
            command=self.goto_main,
            relief="flat"
        )
        self.button_1.place(
            x=70.5535888671875,
            y=736.8928833007812,
            width=193.36904907226562,
            height=64.45635986328125
        )

        self.button_image_2 = PhotoImage(
            file=self.relative_to_assets("button_2.png"))
        self.button_2 = Button(
            self.canvas,
            image=self.button_image_2,
            borderwidth=0,
            highlightthickness=0,
            command=lambda: print("button_2 clicked"),
            relief="flat"
        )
        self.button_2.place(
            x=68.8115234375,
            y=555.71826171875,
            width=196.85317993164062,
            height=64.45635986328125
        )

        self.button_image_3 = PhotoImage(
            file=self.relative_to_assets("button_3.png"))
        self.button_3 = Button(
            self.canvas,
            image=self.button_image_3,
            borderwidth=0,
            highlightthickness=0,
            command=lambda: print("button_3 clicked"),
            relief="flat"
        )
        self.button_3.place(
            x=101.91070556640625,
            y=481.6805419921875,
            width=166.3670654296875,
            height=32.228179931640625
        )

        self.button_image_4 = PhotoImage(
            file=self.relative_to_assets("button_4.png"))
        self.button_4 = Button(
            self.canvas,
            image=self.button_image_4,
            borderwidth=0,
            highlightthickness=0,
            command=lambda: print("button_4 clicked"),
            relief="flat"
        )
        self.button_4.place(
            x=102.78173828125,
            y=437.2579345703125,
            width=166.3670654296875,
            height=32.22817611694336
        )

        self.button_image_5 = PhotoImage(
            file=self.relative_to_assets("button_5.png"))
        self.button_5 = Button(
            self.canvas,
            image=self.button_image_5,
            borderwidth=0,
            highlightthickness=0,
            command=lambda: print("button_5 clicked"),
            relief="flat"
        )
        self.button_5.place(
            x=101.91070556640625,
            y=398.0614929199219,
            width=166.3670654296875,
            height=32.22817611694336
        )

        self.button_image_6 = PhotoImage(
            file=self.relative_to_assets("button_6.png"))
        self.button_6 = Button(
            self.canvas,
            image=self.button_image_6,
            borderwidth=0,
            highlightthickness=0,
            command=lambda: print("button_6 clicked"),
            relief="flat"
        )
        self.button_6.place(
            x=68.8115234375,
            y=314.4424743652344,
            width=202.079345703125,
            height=64.45635223388672
        )

        self.button_image_7 = PhotoImage(
            file=self.relative_to_assets("button_7.png"))
        self.button_7 = Button(
            self.canvas,
            image=self.button_image_7,
            borderwidth=0,
            highlightthickness=0,
            command=lambda: print("button_7 clicked"),
            relief="flat"
        )
        self.button_7.place(
            x=73.16668701171875,
            y=216.88690185546875,
            width=193.36904907226562,
            height=64.45635986328125
        )

        self.button_image_8 = PhotoImage(
            file=self.relative_to_assets("button_8.png"))
        self.button_8 = Button(
            self.canvas,
            image=self.button_image_8,
            borderwidth=0,
            highlightthickness=0,
            command=lambda: print("button_8 clicked"),
            relief="flat"
        )
        self.button_8.place(
            x=87.1031494140625,
            y=112.36309814453125,
            width=166.3670654296875,
            height=64.45635986328125
        )

        self.image_image_1 = PhotoImage(
            file=self.relative_to_assets("image_1.png"))
        image_1 = self.canvas.create_image(
            158.1329345703125,
            42.130950927734375,
            image=self.image_image_1
        )

        self.image_image_2 = PhotoImage(
            file=self.relative_to_assets("image_2.png"))
        image_2 = self.canvas.create_image(
            677.3829345703125,
            165.297607421875,
            image=self.image_image_2
        )

        self.frame_top = tkinter.Frame(self.canvas, borderwidth=2)
        self.frame_top.place(x=487.0,
                             y=535.0,
                             width=697.0,
                             height=196.0)
        self.rules_select = tkinter.Frame(self.frame_top)
        self.rules_select.pack(padx=2, pady=2, ipady=2, ipadx=2, side='top')
        self.rules_Scroll = Scrollbar(self.rules_select)
        self.rules_Scroll.pack(side='right', fill='y')
        self.rule_printout = tkinter.Listbox(self.rules_select, yscrollcommand=self.rules_Scroll.set, width=200, height=8)
        self.rule_printout.pack(side='right', fill=BOTH)
        self.rules_Scroll.config(command=self.rule_printout.yview)

        self.canvas.create_text(
            382.3829345703125,
            249.11508178710938,
            anchor="nw",
            text="设备管理",
            fill="#D9D9D9",
            font=("Roboto Regular", 27 * -1)
        )

        self.button_image_9 = PhotoImage(
            file=self.relative_to_assets("button_9.png"))
        self.button_9 = Button(
            self.canvas,
            image=self.button_image_9,
            borderwidth=0,
            highlightthickness=0,
            command=self.select_device_k,
            relief="flat"
        )
        self.button_9.place(
            x=382.3829345703125,
            y=308.3452453613281,
            width=92.6170654296875,
            height=120.65475463867188
        )

        self.button_image_10 = PhotoImage(
            file=self.relative_to_assets("button_10.png"))
        self.button_10 = Button(
            self.canvas,
            image=self.button_image_10,
            borderwidth=0,
            highlightthickness=0,
            command=lambda: print("button_10 clicked"),
            relief="flat"
        )
        self.button_10.place(
            x=525.0,
            y=308.0,
            width=98.0,
            height=120.0
        )

        self.canvas.create_rectangle(
            382.0,
            464.0,
            1271.0,
            819.0,
            fill="#958F93",
            outline="")

        self.button_image_11 = PhotoImage(
            file=self.relative_to_assets("button_11.png"))
        self.button_11 = Button(
            self.canvas,
            image=self.button_image_11,
            borderwidth=0,
            highlightthickness=0,
            command=self.new_redis_data,
            relief="flat"
        )
        self.button_11.place(
            x=914.0,
            y=767.0,
            width=89.0,
            height=25.0
        )

        self.button_image_12 = PhotoImage(
            file=self.relative_to_assets("button_12.png"))
        self.button_12 = Button(
            self.canvas,
            image=self.button_image_12,
            borderwidth=0,
            highlightthickness=0,
            command=self.show_select_rules,
            relief="flat"
        )
        self.button_12.place(
            x=615.0,
            y=766.0,
            width=88.8452377319336,
            height=23.517852783203125
        )

        self.image_image_3 = PhotoImage(
            file=self.relative_to_assets("image_3.png"))
        image_3 = self.canvas.create_image(
            658.0,
            427.0,
            image=self.image_image_3
        )

        self.canvas.create_text(
            400.6745910644531,
            486.75,
            anchor="nw",
            text="新增规则",
            fill="#000000",
            font=("Roboto Regular", 27 * -1)
        )

        self.canvas.create_rectangle(
            971.0,
            47.0,
            1229.0,
            160.0,
            fill="#3D3644",
            outline="")

        self.button_image_13 = PhotoImage(
            file=self.relative_to_assets("button_13.png"))
        self.button_13 = Button(
            self.canvas,
            image=self.button_image_13,
            borderwidth=0,
            highlightthickness=0,
            command=lambda: print("button_13 clicked"),
            relief="flat"
        )
        self.button_13.place(
            x=987.0,
            y=58.0,
            width=109.0,
            height=98.0
        )

        self.button_image_14 = PhotoImage(
            file=self.relative_to_assets("button_14.png"))
        self.button_14 = Button(
            self.canvas,
            image=self.button_image_14,
            borderwidth=0,
            highlightthickness=0,
            command=lambda: print("button_14 clicked"),
            relief="flat"
        )
        self.button_14.place(
            x=1108.0,
            y=57.0,
            width=100.88568115234375,
            height=98.00003051757812
        )

