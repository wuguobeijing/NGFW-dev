# This file was generated by the Tkinter Designer by Parth Jadhav
# https://github.com/ParthJadhav/Tkinter-Designer
import datetime
import json
import shutil
from pathlib import Path

# from tkinter import *
# Explicit imports to satisfy Flake8
from tkinter import Tk, Canvas, Entry, Text, Button, PhotoImage, LabelFrame, IntVar, Radiobutton, N, S, W, E, Frame, \
    Scrollbar, Listbox, BOTH, END, Checkbutton, ACTIVE, messagebox

from kafka import KafkaProducer

from src.client.receive_parquet_train import on_send_success, send_model, on_send_error


class MY_COMMAND_GUI():
    def __init__(self, command_window):
        self.command_window = command_window
        self.OUTPUT_PATH = Path(__file__).parent
        self.ASSETS_PATH = self.OUTPUT_PATH / Path("assets")

    def relative_to_assets(self, path: str) -> Path:
        return self.ASSETS_PATH / Path(path)

    def send_config(self):
        shutil.copy('/media/wuguo-buaa/LENOVO_USB_HDD/PycharmProjects/NGFW-dev/src/Model/cache/slips.conf',
                    '/media/wuguo-buaa/LENOVO_USB_HDD/PycharmProjects/NGFW-dev/src/Model/auto_gl/slips.conf')
        config_content = open('/media/wuguo-buaa/LENOVO_USB_HDD/PycharmProjects/NGFW-dev/src/Model/auto_gl/slips.conf', 'a+')
        print(config_content)
        config_content.seek(0)
        new_content = ''

        log_rule = 'create_log_files = no'
        if self.table_num.get() == 1:
            log_rule = 'create_log_files = yes'

        if self.entry_exp.get(1.0, END) != '\n' and self.entry_exp.get(1.0, END).split('\n')[0].isnumeric():
            expire_time_rule = 'tcp_inactivity_timeout = ' + self.entry_exp.get(1.0, END).split('\n')[0]
        elif self.entry_exp.get(1.0, END) == '\n':
            expire_time_rule = 'tcp_inactivity_timeout = 60'
        else:
            messagebox.showerror('Error', 'must input int var!')
            return

        new_db_rule = 'deletePrevdb = False'
        if self.vardelete.get() == 1:
            new_db_rule = 'deletePrevdb = True'

        label_binary = 'label = unknown'
        if self.table_num_label.get() == 1:
            if self.rule_printout.get(ACTIVE) == 'normal':
                label_binary = 'label = normal'
            else:
                messagebox.showerror('Error', 'label and multi-label not match!')
                return
        elif self.table_num_label.get() == 2:
            if self.rule_printout.get(ACTIVE) in ['DDoS', 'C&C', 'msf', 'nmap', 'unknown_attack']:
                label_binary = 'label = malicious'
            else:
                messagebox.showerror('Error', 'label and multi-label not match!')
                return

        label_multi = 'module_labels = ' + self.rule_printout.get(ACTIVE)
        if self.table_num.get() == 1:
            if self.table_num_label.get() == 1 or self.table_num_label.get() == 2:
                mode = 'mode = train'
            else:
                messagebox.showerror('Error', 'label and mode not match!')
                return
        else:
            if self.table_num_label.get() == 3:
                mode = 'mode = test'
            else:
                messagebox.showerror('Error', 'label and mode not match!')
                return

        for lines in config_content:
            if '[parameters]' in lines:
                lines = lines + '\n' + log_rule + '\n' + expire_time_rule + '\n' + new_db_rule + '\n' \
                        + label_binary + '\n' + label_multi
                print(lines)
            if '[flowmldetection]' in lines:
                lines = lines + '\n' + mode+ '\n'
                print(lines)
            new_content = new_content + lines
        config_content.seek(0)
        config_content.truncate()
        config_content.write(new_content)
        config_content.flush()
        config_content.close()
        dt = datetime.datetime.now()
        producer = KafkaProducer(bootstrap_servers='wuguo-buaa:9092',
                                 value_serializer=lambda m: json.dumps(m).encode('ascii'))
        json_content = {"type": 'new_slips_conf', "time": dt.strftime("%Y-%m-%d%H-%M-%S"), "model_host": 'k'}
        producer.send('new_train_topic', json_content).add_callback(on_send_success).add_errback(on_send_error)
        producer.close()
        send_model('k', dt, 2235, file_name='/media/wuguo-buaa/LENOVO_USB_HDD/PycharmProjects/NGFW-dev/src/Model'
                                            '/auto_gl/slips.conf')

    def set_command_window(self):
        self.command_window.geometry("960x304")
        self.command_window.configure(bg="#FFFFFF")
        self.command_window.resizable(False, False)

        self.canvas = Canvas(
            self.command_window,
            bg="#FFFFFF",
            height=304,
            width=960,
            bd=0,
            highlightthickness=0,
            relief="ridge"
        )

        self.canvas.place(x=0, y=0)
        self.canvas.create_rectangle(
            0.0,
            2.0,
            250.0,
            294.0,
            fill="#FCD12A",
            outline="")

        self.canvas.create_rectangle(
            277.0,
            79.0,
            945.0,
            300.0,
            fill="#29C9FC",
            outline="")

        self.canvas.create_rectangle(
            665.0,
            89.0,
            935.0,
            283.0,
            fill="#E7DDB6",
            outline="")

        self.canvas.create_text(
            468.0,
            96.0,
            anchor="nw",
            text="删除旧防御行为",
            fill="#FFFFFF",
            font=("Montserrat SemiBold", 23 * -1)
        )
        self.vardelete = IntVar()  # 定义var1整型变量用来存放选择行为返回值
        self.delete_choice = Checkbutton(self.canvas, variable=self.vardelete, onvalue=1, offvalue=0)
        self.delete_choice.place(
            x=545.0,
            y=147.0,
            width=12.0,
            height=12.0)

        self.canvas.create_text(
            795.0,
            94.0,
            anchor="nw",
            text="模型训练",
            fill="#FFFFFF",
            font=("Montserrat SemiBold", 23 * -1)
        )

        self.canvas.create_text(
            307.0,
            96.0,
            anchor="nw",
            text="活动超时时间",
            fill="#FFFFFF",
            font=("Montserrat SemiBold", 23 * -1)
        )
        self.entry_exp = Text(
            self.canvas,
            bd=0,
            bg="#F8F8F8",
            highlightthickness=0,
        )
        self.entry_exp.place(
            x=345.0,
            y=157.0,
            width=52.0,
            height=22.0
        )

        self.canvas.create_text(
            330.0,
            198.0,
            anchor="nw",
            text="生成日志",
            fill="#FFFFFF",
            font=("Montserrat SemiBold", 23 * -1)
        )
        self.varlog = IntVar()  # 定义var1整型变量用来存放选择行为返回值
        self.log_choice = Checkbutton(self.canvas, variable=self.varlog, onvalue=1, offvalue=0)
        self.log_choice.place(
            x=370.0,
            y=237.0,
            width=12.0,
            height=12.0)

        self.canvas.create_text(
            502.0,
            198.0,
            anchor="nw",
            text="工作模式",
            fill="#FFFFFF",
            font=("Montserrat SemiBold", 23 * -1)
        )
        self.choose_table_mode = LabelFrame(self.canvas, width=5, height=2, background="#2ACAFC")
        self.choose_table_mode.place(
            x=482.0,
            y=230.0,
            width=130.0,
            height=25.0)
        TABLES = [('train', 1), ('test', 2)]
        self.table_num = IntVar()
        self.table_num.set(2)
        for TABLE, num in TABLES:
            b = Radiobutton(self.choose_table_mode, text=TABLE, variable=self.table_num, value=num,
                            background="#2ACAFC")
            b.pack(side='left', anchor=N, padx=2)

        self.canvas.create_text(
            308.0,
            124.0,
            anchor="nw",
            text="（TCP）",
            fill="#FFFFFF",
            font=("Montserrat Medium", 18 * -1)
        )
        self.canvas.create_text(
            378.0,
            130.0,
            anchor="nw",
            text="default:60",
            fill="#FFFFFF",
            font=("Montserrat SemiBold", 12 * -1)
        )

        self.canvas.create_text(
            689.0,
            132.0,
            anchor="nw",
            text="标签",
            fill="#000000",
            font=("Montserrat Medium", 18 * -1)
        )

        self.choose_table_label = LabelFrame(self.canvas, width=5, height=2, background="#E8DEB6")
        self.choose_table_label.place(
            x=740.0,
            y=135.0,
            width=190.0,
            height=25.0)
        TABLES_label = [('正常', 1), ('异常', 2), ('未知', 3)]
        self.table_num_label = IntVar()
        self.table_num_label.set(3)
        for TABLE, num in TABLES_label:
            b = Radiobutton(self.choose_table_label, text=TABLE, variable=self.table_num_label, value=num,
                            background="#E8DEB6")
            b.pack(side='left', anchor=N, padx=1)

        self.canvas.create_text(
            671.0,
            202.0,
            anchor="nw",
            text="详细标签",
            fill="#000000",
            font=("Montserrat Medium", 18 * -1)
        )

        TABLES_detail_label = ['unknown', 'normal', 'DDoS', 'C&C', 'msf', 'nmap', 'unknown_attack']
        self.rules_select = Frame(self.canvas)
        self.rules_select.place(
            x=760.0,
            y=165.0,
            width=120.0,
            height=105.0)
        self.rules_Scroll = Scrollbar(self.rules_select)
        self.rules_Scroll.pack(side='right', fill='y')
        self.rule_printout = Listbox(self.rules_select, yscrollcommand=self.rules_Scroll.set, width=200, height=5)
        self.rule_printout.pack(side='right', fill=BOTH)
        for item in TABLES_detail_label:
            self.rule_printout.insert(END, item)
        self.rules_Scroll.config(command=self.rule_printout.yview)

        self.button_image_1 = PhotoImage(
            file=self.relative_to_assets("button_1.png"))
        self.button_1 = Button(
            self.canvas,
            image=self.button_image_1,
            borderwidth=0,
            highlightthickness=0,
            command=lambda: print("self.button_1 clicked"),
            relief="flat"
        )
        self.button_1.place(
            x=263.0,
            y=2.0,
            width=679.0,
            height=59.0
        )

        self.button_image_2 = PhotoImage(
            file=self.relative_to_assets("button_2.png"))
        self.button_2 = Button(
            self.canvas,
            image=self.button_image_2,
            borderwidth=0,
            highlightthickness=0,
            command=lambda: print("self.button_2 clicked"),
            relief="flat"
        )
        self.button_2.place(
            x=22.0,
            y=125.0,
            width=196.0,
            height=59.0
        )

        self.button_image_3 = PhotoImage(
            file=self.relative_to_assets("button_3.png"))
        self.button_3 = Button(
            self.canvas,
            image=self.button_image_3,
            borderwidth=0,
            highlightthickness=0,
            command=lambda: print("self.button_3 clicked"),
            relief="flat"
        )
        self.button_3.place(
            x=22.0,
            y=208.0,
            width=196.0,
            height=59.0
        )

        self.button_image_4 = PhotoImage(
            file=self.relative_to_assets("button_4.png"))
        self.button_4 = Button(
            self.canvas,
            image=self.button_image_4,
            borderwidth=0,
            highlightthickness=0,
            command=lambda: print("self.button_4 clicked"),
            relief="flat"
        )
        self.button_4.place(
            x=24.0,
            y=15.0,
            width=196.0,
            height=74.0
        )

        self.button_image_5 = PhotoImage(
            file=self.relative_to_assets("button_5.png"))
        self.button_5 = Button(
            self.canvas,
            image=self.button_image_5,
            borderwidth=0,
            highlightthickness=0,
            command=self.send_config,
            relief="flat"
        )
        self.button_5.place(
            x=409.0,
            y=261.0,
            width=105.99998474121094,
            height=34.0
        )


if __name__ == '__main__':
    init_window = Tk()  # 实例化出一个父窗口
    tool = MY_COMMAND_GUI(init_window)
    tool.set_command_window()
    init_window.mainloop()
