# This file was generated by the Tkinter Designer by Parth Jadhav
# https://github.com/ParthJadhav/Tkinter-Designer
import tkinter
from pathlib import Path

# from tkinter import *
# Explicit imports to satisfy Flake8
from tkinter import Tk, Canvas, Entry, Text, Button, PhotoImage


class MY_HELP_GUI():
    def __init__(self, help_window):
        self.help_window = help_window
        self.OUTPUT_PATH = Path(__file__).parent
        self.ASSETS_PATH = self.OUTPUT_PATH / Path("assets")

    def relative_to_assets(self, path: str) -> Path:
        return self.ASSETS_PATH / Path(path)

    def set_help_window(self):
        self.help_window.geometry("1217x840")
        self.help_window.configure(bg="#282B2D")
        self.help_window.resizable(False, False)
        self.canvas = Canvas(
            self.help_window,
            bg="#282B2D",
            height=840,
            width=1217,
            bd=0,
            highlightthickness=0,
            relief="ridge"
        )

        self.canvas.place(x=0, y=0)
        self.canvas.create_rectangle(
            0.0,
            0.0,
            231.0,
            790.0,
            fill="#D9D9D9",
            outline="")

        # self.button_image_1 = PhotoImage(
        #     file=self.relative_to_assets("button_1.png"))
        # self.button_1 = Button(
        #     image=self.button_image_1,
        #     borderwidth=0,
        #     highlightthickness=0,
        #     command=lambda: print("button_1 clicked"),
        #     relief="flat"
        # )
        # self.button_1.place(
        #     x=20.5535888671875,
        #     y=680.8717651367188,
        #     width=193.36904907226562,
        #     height=59.55615234375
        # )
        #
        # self.button_image_2 = PhotoImage(
        #     file=self.relative_to_assets("button_2.png"))
        # self.button_2 = Button(
        #     image=self.button_image_2,
        #     borderwidth=0,
        #     highlightthickness=0,
        #     command=lambda: print("button_2 clicked"),
        #     relief="flat"
        # )
        # self.button_2.place(
        #     x=29.1031494140625,
        #     y=103.82086181640625,
        #     width=166.3670654296875,
        #     height=59.55615234375
        # )

        self.image_image_1 = PhotoImage(
            file=self.relative_to_assets("image_1.png"))
        self.image_1 = self.canvas.create_image(
            123.9208984375,
            36.31109619140625,
            image=self.image_image_1
        )

        self.image_image_2 = PhotoImage(
            file=self.relative_to_assets("image_2.png"))
        self.image_2 = self.canvas.create_image(
            609.3829345703125,
            127.80130004882812,
            image=self.image_image_2
        )

        self.image_image_3 = PhotoImage(
            file=self.relative_to_assets("image_3.png"))
        self.image_3 = self.canvas.create_image(
            608.0,
            395.0,
            image=self.image_image_3
        )

        self.canvas.create_text(
            264.0,
            189.0,
            anchor="nw",
            text="登陆页面\n\n主页面-->引导至各功能页\n\n防火墙页面管理（查看、修改）设备规则\n\n流量检测页面：模型训练管理；训练结果展示\n二分类-攻击检测模型——绘制多参数pca异常检测图 & "
                 "绘制单参数周期异常检测图\n多分类-攻击识别模型\n  "
                 "\n配置文件管理页面：活动超时时间；删除历史防御规则；生成日志；工作模式-->训练、测试；模型训练参数\n\n参数配置页面：接口地址-->eth0；工作模式-->阻挡、不阻挡；日志模式；显示界面\n"
                 "日志页面\n\n接收客户端传输的压缩数据并进行训练，将模型压缩为.gz后再传回边缘.接收工业载荷数据并在Mysql中\n持久化,系统存放每次训练的模型压缩文件以及边缘端防护的配置文件\n"
                 "训练过程针对的是汇聚得到的训练数据",
            fill="#FFFFFF",
            font=("Roboto Regular", 20 * -1)
        )
